const { response, request } = require("express");
const express = require( "express ");
const { v4:uuidv4 } = require( "uuid ");

const app = express();
app.use(express.json());

const customers= [];

/**
 * cpf-string
 * name-string
 * id-uuid
 * statement [array]
*/

//middleware
function verifyIfExistsAccountCpf(request,response,next){

    const{cpf} = request.headers;

    const customer = custumers.find(customer=>customer.cpf===cpf); 

    if(!customer){
    return response.status(400).json({error:'Customer not found'});
    }

    request.customers = customer;

    return next();
}


function balance(statement){

    const balance= statement.reduce((acc,operatin)=>{
        if(operatin.type==='credit'){
            return acc  + operation.amount;
        }
        else{
            return acc - operation.amount;
        }
    },0);
     return balance;
}


app.post( "/account ",(request,response)=>{
const {cpf,name} = request.body;

const costumerAlreadyExist= customers.some((customer)=>customer.cpf === cpf);
if( costumerAlreadyExist){
    return response.status(400).json({error: 'customer Already Exist!'});
}

const id = uuidv4();
costumers.push({
    cpf,
    name,
    id : uuidv4(),
    statement: [],
});
return response.status(201).send();
});

app.get('/statement',verifyIfExistsAccountCpf,(request,response) => { 
 const{customer}=request;
return response.json(customer.statement)
});


app.post('/deposit',verifyIfExistsAccountCpf,(request,response)=>{
    const {description,amount}= request.body;
    
    const {customer} = request;

    const  statementOperation = {
        description,
        amount,
        created_at: new Date(),
        type:'credit'
      }

      customer.statement.push(statementOperation);

      return response.status(201).send();

});


app.post('/withdraw',verifyIfExistsAccountCpf,(request,response)=>{

    const{ amount} = request.body;
    const{ customer} = request;
    const balance= GetBalance(customer.statement);

    if(balance<amount){
        return response.status(400).json({error:'Insufficients funds!'})
    }
    const  statementOperation = {
            amount,
            created_at: new Date(),
            type:'debit'
        }
        costumer.statement.push(statementOperation);
        return response.status(201).send()
});

app.get('/statement/data',verifyIfExistsAccountCpf,(request,response) => { 
    const{customer}=request;
    const{date}= request.query;

    const dateFormat = new date(date+' 00:00')
    const statement=customer.statement.filter((statement)=> statement.created_at.toDateString()=== 
    new date(dateFormat).toDateString())

   return response.json(statement);
   });


   app.put('/account',verifyIfExistsAccountCpf,(request,response)=>{
    const{name}=request.body;
    const{customer}=request;
    customer.name= name;
    return response.status(201).send()
   });

   app.get('/account',verifyIfExistsAccountCpf,(request,response)=>{
    const{customer}=request;
    return response.json(customer)
   });

   app.delete('/account',verifyIfExistsAccountCpf,(request,response)=>{
    const {customer} = request;
   customer.splice(customer,1);
    return response.status(200).json(customers);
})

app.get('/balance',verifyIfExistsAccountCpf,(request,response)=>{
    const{customer}= request;
    const balance=GetBalance(customer.statement);

    return response.json(balance);

})



app.listen(3333);
